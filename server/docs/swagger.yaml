swagger: '2.0'
info:
  version: 1.0.1 Beta
  title: 'Api Article Free'
  description: 'Api for article'
  termsOfService: terms
  contact:
    name: 'farhan'
    url: 'http://opensource.org/licenses/MIT'
    email: 'farhanrafid97@gmail.com'
  license:
    name: farhan
    url: http://opensource.org/licenses/MIT
tags:
  - name: 'players'
    description: 'end point for players'

paths:
  /api/v1/players:
    get:
      tags:
        - 'players'
      summary: 'list players'
      description: 'get all data players'
      responses:
        200:
          description: Success
          schema:
              type: 'object'
              properties:
                result:
                  type: 'string'
                  example : "Success"
                data:
                  type: "array"
                  items:
                    type: 'object'
                    properties:
                      id:
                        type: 'integer'
                        example: 1
                      username:
                        type: 'string'
                        example: 'farhan'
                      email:
                        type: 'string'
                        example: 'farhan@gmail.com'
                      password:
                        type: 'string'
                        example: '$2b$10$8xymg.GWWlEd7C/vchWJMu16vMfRLcVIiNd.IlQ8SQFnUpkE.FR3i'
                      experience:
                         type: 'integer'
                         example: 0
    post:
      tags:
        - 'players'
      summary: 'create player'
      description: 'create new player'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Player Object'
          required: true
          schema:
            type: "object"
            properties:
              id:
                type: 'integer'
                example: 1
              username:
                type: 'string'
                example: 'farhan'
              email:
                type: 'string'
                example: 'farhan@gmail.com'
              password:
                type: 'string'
                example: '1234'
              experience:
                type: 'integer'
                example: 0
      responses:
        200:
          description: Success
          schema:
              type: 'object'
              properties:
                result:
                  type: 'string'
                  example : "Success"
                data:
                  type: "object"
                  properties:
                   id:
                    type: 'integer'
                    example: 1
                   username:
                    type: 'string'
                    example: 'farhan'
                   email:
                    type: 'string'
                    example: 'farhan@gmail.com'
                   password:
                    type: 'string'
                    example: '$2b$10$SPPDpNco1mPAmrdAyK79c.e1RjVt33BsWK7Fbh6ODTzJrB4UdDQSO'
                   experience:
                    type: 'integer'
                    example: 0
        400:
          description: got 2 expect error response
          schema:
              type: 'object'
              properties:
                result:
                  type: 'string'
                  example: "failed"
                message:
                  type: 'string'
                  example : "username or email cannot empty || password cannot be empty"
      produces:
        - 'aplication/json'
        

   

  /api/v1/players/{idPlayer}:
    get:
      tags:
        - 'players'
      summary: 'Find Player by ID'
      description: 'Returns a single player data'
      parameters:
        - in: 'path'
          name: 'idPlayer'
          description: 'ID of Player'
          required: true
          type: 'integer'
      produces:
        - 'application/json'
      responses:
        200:
          description: Success
          schema:
              type: 'object'
              properties:
                result:
                  type: 'string'
                  example : "Success"
                data:
                    type: 'object'
                    properties:
                      id:
                        type: 'integer'
                        example: 1
                      username:
                        type: 'string'
                        example: 'farhan'
                      email:
                        type: 'string'
                        example: 'farhan@gmail.com'
                      password:
                        type: 'string'
                        example: '$2b$10$8xymg.GWWlEd7C/vchWJMu16vMfRLcVIiNd.IlQ8SQFnUpkE.FR3i'
                      experience:
                         type: 'integer'
                         example: 0
        404:
          description: Not found
          schema:
              type: 'object'
              properties:
                result:
                  type: 'string'
                  example: "Not found"
                message:
                  type: 'string'
                  example : "Player with id 1 not found"

    put:
      tags:
        - 'players'
      summary: 'Updated Player by id'
      description: 'This can only be done by the logged in user.'
      security:
        - Token: []
      produces:
        - 'application/json'
      parameters:
        - name: 'idPlayer'
          in: 'path'
          description: 'name that need to be updated'
          required: true
          type: 'integer'
        - in: 'body'
          name: 'body'
          description: 'Player Object'
          required: true
          schema:
            type: "object"
            properties:
              id:
                type: 'integer'
                example: 1
              username:
                type: 'string'
                example: 'farhan'
              email:
                type: 'string'
                example: 'farhan@gmail.com'
              password:
                type: 'string'
                example: '1234'
              experience:
                type: 'integer'
                example: 0

      responses:
        200:
          description: Success
          schema:
              type: 'object'
              properties:
                result:
                  type: 'string'
                  example: "Success"
                message:
                  type: 'string'
                  example : "Player with id: 1 successfully updated"
        404:
          description: Not found
          schema:
              type: 'object'
              properties:
                result:
                  type: 'string'
                  example: "Not found"
                message:
                  type: 'string'
                  example : "Player with id: 1 not found"
        500:
          description: failed
          schema:
              type: 'object'
              properties:
                result:
                  type: 'string'
                  example: "failed"
                message:
                  type: 'string'
                  example : "Failed to update"
    
                  

    delete:
      tags:
        - 'players'
      summary: 'Delete player by ID'
      security:
        - Token: []
      description: 'Delete Player by Id'
      parameters:
        - in: 'path'
          name: 'idPlayer'
          description: 'ID of Player to delete'
          required: true
          type: 'integer'
      produces:
        - 'application/json'
      responses:
        200:
          description: 'success  delete player by id'
          schema:
              type: 'object'
              properties:
                result:
                  type: 'string'
                  example: "Success"
                message:
                  type: 'string'
                  example : "Player with id: 1, was deleted successfully"
        400:
          description: 'failed delete player by id'
          schema:
              type: 'object'
              properties:
                result:
                  type: 'string'
                  example: "FAILED"
                message:
                  type: 'string'
                  example : "Cannot delete Player with id=1. Maybe Player was not found!"
                  
  /api/v1/players/exp/{idPlayer}:
   post:
      tags:
        - 'players'
      summary: 'Updated experience by id'
      description: 'This can only be done by the logged in user.'
      security:
        - Token: []
      produces:
        - 'application/json'
      parameters:
        - name: 'idPlayer'
          in: 'path'
          description: 'id that need to be updated'
          required: true
          type: 'integer'
        - in: 'body'
          name: 'body'
          description: 'Player Object'
          required: true
          schema:
            type: "object"
            properties:
              exp:
                type: 'integer'
                example: 100
      responses:
        200:
          description: Success
          schema:
              type: 'object'
              properties:
                result:
                  type: 'string'
                  example: "SUCCESS"
                message:
                  type: 'string'
                  example : "Player with id = 1 gain 100 experience. Total experience = 100"
        400:
          description: Not found
          schema:
              type: 'object'
              properties:
                result:
                  type: 'string'
                  example: "Failed"
                message:
                  type: 'string'
                  example : "Exp field cannot be empty"
        404:
          description: failed
          schema:
              type: 'object'
              properties:
                result:
                  type: 'string'
                  example: "Not found"
                message:
                  type: 'string'
                  example : "Player with id: 1,not found"
securityDefinitions:
  Token:
    type: 'apiKey'
    in: 'header'
    name: 'Authorization'